/*
@Procedural Approach:
1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
3. Variable Support: Supports variable declarations and manipulation within the procedural code.
4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

@Non-Procedural Approach:
1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/

SELECT * FROM employees;

SELECT count(*) FROM employees;

CREATE FUNCTION emp_count() 
RETURNS INT 
LANGUAGE SQL 
as 
$$

SELECT count(*) FROM employees;

$$

SELECT emp_count ();

CREATE Function delete_emp()
RETURNS void
LANGUAGE SQL
AS
$$
DELETE FROM employees WHERE employee_id = 30;
$$
;

SELECT delete_emp ();

CREATE FUNCTION delete_emp_by_id(p_emp_id INT)
RETURNS void
LANGUAGE SQL
AS
$$
DELETE FROM employees WHERE employee_id = p_emp_id;
$$
;

SELECT delete_emp_by_id (29);

-- Procedure

CREATE Procedure remove_emp()
LANGUAGE plpgsql
AS
$$
DECLARE test_var int;
 BEGIN
    DELETE FROM employees WHERE employee_id = 22; 
 END
$$
;

CALL remove_emp ();

-- DROP PROCEDURE remove_emp;

CREATE Procedure remove_emp_with_var()
LANGUAGE plpgsql
AS
$$
DECLARE test_var int;
 BEGIN
 SELECT employee_id INTO test_var FROM employees WHERE employee_id = 21;
    DELETE FROM employees WHERE employee_id = test_var; 
 END
$$
;

-- SELECT employee_id FROM employees WHERE employee_id = 27;

CALL remove_emp_with_var ();

CREATE Procedure remove_emp_by_id(p_emp_id INT)
LANGUAGE PLPGSQL
as
$$
    DECLARE test_var int;
    BEGIN
    SELECT employee_id INTO test_var FROM employees WHERE employee_id = p_emp_id;
    DELETE FROM employees WHERE employee_id = test_var;

    raise notice 'Employee removed successfully.';
    END
$$
;

DROP PROCEDURE remove_emp_by_id;

CALL remove_emp_by_id (16);

SELECT * FROM employees;